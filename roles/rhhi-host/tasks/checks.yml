---
- name: check that the inventory is set up correctly
  fail:
    msg: reference documentation for naming conventions of hosts
  when: >
    ((groups['rhhi-hosts'] | length) not in [3, 6, 9]) or
    ((groups['rhhi-install-target'] | length) != 1)
  run_once: yes

- name: check if any auth variables are set
  fail:
    msg: must set some form of authentication for rhsm
  when:
    - rhsm_username is undefined
    - rhsm_password is undefined
    - rhsm_org_id is undefined
    - rhsm_activationkey is undefined
  run_once: yes

- name: check that just rhsm_username and rhsm_password are used
  fail:
    msg: use either (rhsm_username + rhsm_password) or (rhsm_org_id + rhsm_activationkey)
  when:
    - rhsm_username is defined
    - rhsm_password is defined
    - rhsm_org_id is defined or rhsm_activationkey is defined
  run_once: yes

- name: check that just rhsm_org_id and rhsm_activationkey are used
  fail:
    msg: use either (rhsm_username + rhsm_password) or (rhsm_org_id + rhsm_activationkey)
  when:
    - rhsm_org_id is defined
    - rhsm_activationkey is defined
    - rhsm_username is defined or rhsm_password is defined
  run_once: yes

# - name: check that one of (rhsm_username + rhsm_password) or (rhsm_org_id + rhsm_activationkey) are used
#   fail:
#     msg: use either (rhsm_username + rhsm_password) or (rhsm_org_id + rhsm_activationkey)
#   when: >
#     (rhsm_username is defined and rhsm_password is defined) or
#     (rhsm_org_id is defined and rhsm_activationkey is defined)
#   run_once: yes

- name: check that at least one pool id was set
  fail:
    msg: must set one or more pool ids for installation of rhhi
  when: not base_pool_ids
  run_once: yes

- name: check that the rhhi_ssh_private_key_path variable is set
  fail:
    msg: must set the rhhi_ssh_private_key_path to the path to the rhhi ssh private key
  when: rhhi_ssh_private_key_path is undefined
  run_once: yes

- name: check that dns is functioning correctly
  block:
    - name: perform dns lookup by ip
      command: host {{ test_ip }}
      register: lookup_by_ip
      changed_when: no

    - set_fact:
        lookup_match: "{{ lookup_by_ip.stdout | regex_findall('^.*domain\\sname\\spointer\\s([a-zA-Z\\-]+)\\.([a-zA-Z\\-]+)\\.$') }}"

    - set_fact:
        lookup_hostname: "{{ lookup_match[0][0] }}"
        lookup_domainname: "{{ lookup_match[0][1] }}"

    - name: perform dns lookup by hostname
      command: host {{ lookup_hostname }}
      register: lookup_by_hostname
      changed_when: no

    - name: check that the returned ip address is correct
      fail:
        msg: received incorrect ip on lookup by hostname
      when: not (lookup_by_hostname.stdout | regex_search(lookup_hostname + '.' + lookup_domainname + ' has address ' + (test_ip | regex_escape())))
  rescue:
    - fail:
        msg: forward and reverse dns are required to be functioning correctly for this system
  vars:
    test_ip: "{{ (groups['rhhi-hosts'] | reject('equalto', inventory_hostname) | map('extract', hostvars) | first)['ansible_host'] }}"
  run_once: yes
